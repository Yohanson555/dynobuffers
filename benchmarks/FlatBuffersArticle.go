/*
 * Copyright (c) 2019-present unTill Pro, Ltd. and Contributors
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

package benchmarks

// Code generated by the FlatBuffers compiler. DO NOT EDIT.

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Article struct {
	_tab flatbuffers.Table
}

func GetRootAsArticle(buf []byte, offset flatbuffers.UOffsetT) *Article {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Article{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Article) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Article) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Article) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *Article) ArticleNumber() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateArticleNumber(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *Article) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Article) InternalName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Article) ArticleManual() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateArticleManual(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

func (rcv *Article) ArticleHash() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateArticleHash(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func (rcv *Article) IdCourses() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateIdCourses(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *Article) IdDepartament() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateIdDepartament(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func (rcv *Article) PcBitmap() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Article) PcColor() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutatePcColor(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

func (rcv *Article) PcText() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Article) PcFontName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Article) PcFontSize() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutatePcFontSize(n int32) bool {
	return rcv._tab.MutateInt32Slot(28, n)
}

func (rcv *Article) PcFontAttr() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutatePcFontAttr(n int32) bool {
	return rcv._tab.MutateInt32Slot(30, n)
}

func (rcv *Article) PcFontColor() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutatePcFontColor(n int32) bool {
	return rcv._tab.MutateInt32Slot(32, n)
}

func (rcv *Article) RmText() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Article) RmFontSize() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateRmFontSize(n int32) bool {
	return rcv._tab.MutateInt32Slot(36, n)
}

func (rcv *Article) IdPacking() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateIdPacking(n int64) bool {
	return rcv._tab.MutateInt64Slot(38, n)
}

func (rcv *Article) IdCommission() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateIdCommission(n int64) bool {
	return rcv._tab.MutateInt64Slot(40, n)
}

func (rcv *Article) IdPromotions() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateIdPromotions(n int64) bool {
	return rcv._tab.MutateInt64Slot(42, n)
}

func (rcv *Article) Savepoints() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateSavepoints(n int32) bool {
	return rcv._tab.MutateInt32Slot(44, n)
}

func (rcv *Article) Quantity() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateQuantity(n int32) bool {
	return rcv._tab.MutateInt32Slot(46, n)
}

func (rcv *Article) Hideonhold() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateHideonhold(n bool) bool {
	return rcv._tab.MutateBoolSlot(48, n)
}

func (rcv *Article) Barcode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Article) TimeActive() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateTimeActive(n bool) bool {
	return rcv._tab.MutateBoolSlot(52, n)
}

func (rcv *Article) Aftermin() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateAftermin(n int32) bool {
	return rcv._tab.MutateInt32Slot(54, n)
}

func (rcv *Article) Periodmin() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutatePeriodmin(n int32) bool {
	return rcv._tab.MutateInt32Slot(56, n)
}

func (rcv *Article) Roundmin() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateRoundmin(n int32) bool {
	return rcv._tab.MutateInt32Slot(58, n)
}

func (rcv *Article) IdCurrency() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateIdCurrency(n int64) bool {
	return rcv._tab.MutateInt64Slot(60, n)
}

func (rcv *Article) ControlActive() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateControlActive(n bool) bool {
	return rcv._tab.MutateBoolSlot(62, n)
}

func (rcv *Article) ControlTime() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateControlTime(n int32) bool {
	return rcv._tab.MutateInt32Slot(64, n)
}

func (rcv *Article) PluNumberVanduijnen() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutatePluNumberVanduijnen(n int32) bool {
	return rcv._tab.MutateInt32Slot(66, n)
}

func (rcv *Article) Sequence() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateSequence(n int32) bool {
	return rcv._tab.MutateInt32Slot(68, n)
}

func (rcv *Article) RmSequence() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateRmSequence(n int32) bool {
	return rcv._tab.MutateInt32Slot(70, n)
}

func (rcv *Article) PurchasePrice() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Article) MutatePurchasePrice(n float32) bool {
	return rcv._tab.MutateFloat32Slot(72, n)
}

func (rcv *Article) IdVdGroup() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateIdVdGroup(n int64) bool {
	return rcv._tab.MutateInt64Slot(74, n)
}

func (rcv *Article) Menu() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateMenu(n bool) bool {
	return rcv._tab.MutateBoolSlot(76, n)
}

func (rcv *Article) Sensitive() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateSensitive(n bool) bool {
	return rcv._tab.MutateBoolSlot(78, n)
}

func (rcv *Article) SensitiveOption() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateSensitiveOption(n bool) bool {
	return rcv._tab.MutateBoolSlot(80, n)
}

func (rcv *Article) DailyStock() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateDailyStock(n int32) bool {
	return rcv._tab.MutateInt32Slot(82, n)
}

func (rcv *Article) Info() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Article) WarningLevel() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateWarningLevel(n int32) bool {
	return rcv._tab.MutateInt32Slot(86, n)
}

func (rcv *Article) FreeAfterPay() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateFreeAfterPay(n int32) bool {
	return rcv._tab.MutateInt32Slot(88, n)
}

func (rcv *Article) IdFoodGroup() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateIdFoodGroup(n int64) bool {
	return rcv._tab.MutateInt64Slot(90, n)
}

func (rcv *Article) ArticleType() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateArticleType(n bool) bool {
	return rcv._tab.MutateBoolSlot(92, n)
}

func (rcv *Article) IdInventoryItem() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateIdInventoryItem(n int64) bool {
	return rcv._tab.MutateInt64Slot(94, n)
}

func (rcv *Article) IdRecipe() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateIdRecipe(n int64) bool {
	return rcv._tab.MutateInt64Slot(96, n)
}

func (rcv *Article) IdUnitySales() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateIdUnitySales(n int64) bool {
	return rcv._tab.MutateInt64Slot(98, n)
}

func (rcv *Article) CanSavepoints() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateCanSavepoints(n bool) bool {
	return rcv._tab.MutateBoolSlot(100, n)
}

func (rcv *Article) ShowInKitchenScreen() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateShowInKitchenScreen(n bool) bool {
	return rcv._tab.MutateBoolSlot(102, n)
}

func (rcv *Article) DecreaseSavepoints() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateDecreaseSavepoints(n int32) bool {
	return rcv._tab.MutateInt32Slot(104, n)
}

func (rcv *Article) HhtColor() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateHhtColor(n int32) bool {
	return rcv._tab.MutateInt32Slot(106, n)
}

func (rcv *Article) HhtFontName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Article) HhtFontSize() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateHhtFontSize(n int32) bool {
	return rcv._tab.MutateInt32Slot(110, n)
}

func (rcv *Article) HhtFontAttr() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(112))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateHhtFontAttr(n int32) bool {
	return rcv._tab.MutateInt32Slot(112, n)
}

func (rcv *Article) HhtFontColor() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(114))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateHhtFontColor(n int32) bool {
	return rcv._tab.MutateInt32Slot(114, n)
}

func (rcv *Article) Tip() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(116))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateTip(n bool) bool {
	return rcv._tab.MutateBoolSlot(116, n)
}

func (rcv *Article) IdBecoGroup() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(118))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateIdBecoGroup(n int64) bool {
	return rcv._tab.MutateInt64Slot(118, n)
}

func (rcv *Article) IdBecoLocation() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(120))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateIdBecoLocation(n int64) bool {
	return rcv._tab.MutateInt64Slot(120, n)
}

func (rcv *Article) BcStandardDosage() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(122))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateBcStandardDosage(n int32) bool {
	return rcv._tab.MutateInt32Slot(122, n)
}

func (rcv *Article) BcAlternativeDosage() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(124))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateBcAlternativeDosage(n int32) bool {
	return rcv._tab.MutateInt32Slot(124, n)
}

func (rcv *Article) BcDisablebalance() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(126))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateBcDisablebalance(n bool) bool {
	return rcv._tab.MutateBoolSlot(126, n)
}

func (rcv *Article) BcUseLocations() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(128))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateBcUseLocations(n bool) bool {
	return rcv._tab.MutateBoolSlot(128, n)
}

func (rcv *Article) TimeRate() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(130))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Article) MutateTimeRate(n float32) bool {
	return rcv._tab.MutateFloat32Slot(130, n)
}

func (rcv *Article) IdFreeOption() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(132))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateIdFreeOption(n int64) bool {
	return rcv._tab.MutateInt64Slot(132, n)
}

func (rcv *Article) PartyArticle() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(134))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutatePartyArticle(n bool) bool {
	return rcv._tab.MutateBoolSlot(134, n)
}

func (rcv *Article) IdPuaGroups() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(136))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateIdPuaGroups(n int64) bool {
	return rcv._tab.MutateInt64Slot(136, n)
}

func (rcv *Article) Promo() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(138))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutatePromo(n bool) bool {
	return rcv._tab.MutateBoolSlot(138, n)
}

func (rcv *Article) OneHandLimit() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(140))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateOneHandLimit(n int32) bool {
	return rcv._tab.MutateInt32Slot(140, n)
}

func (rcv *Article) ConsolidateQuantity() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(142))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateConsolidateQuantity(n int32) bool {
	return rcv._tab.MutateInt32Slot(142, n)
}

func (rcv *Article) ConsolidateAliasName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(144))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Article) HqId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(146))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Article) IsActive() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(148))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateIsActive(n bool) bool {
	return rcv._tab.MutateBoolSlot(148, n)
}

func (rcv *Article) IsActiveModified() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(150))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateIsActiveModified(n int64) bool {
	return rcv._tab.MutateInt64Slot(150, n)
}

func (rcv *Article) IsActiveModifier() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(152))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Article) RentPriceType() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(154))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateRentPriceType(n bool) bool {
	return rcv._tab.MutateBoolSlot(154, n)
}

func (rcv *Article) IdRentalGroup() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(156))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateIdRentalGroup(n int64) bool {
	return rcv._tab.MutateInt64Slot(156, n)
}

func (rcv *Article) ConditionCheckInOrder() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(158))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateConditionCheckInOrder(n bool) bool {
	return rcv._tab.MutateBoolSlot(158, n)
}

func (rcv *Article) WeightRequired() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(160))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateWeightRequired(n bool) bool {
	return rcv._tab.MutateBoolSlot(160, n)
}

func (rcv *Article) DailyNumeric1() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(162))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Article) MutateDailyNumeric1(n float32) bool {
	return rcv._tab.MutateFloat32Slot(162, n)
}

func (rcv *Article) DailyNumeric2() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(164))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Article) MutateDailyNumeric2(n float32) bool {
	return rcv._tab.MutateFloat32Slot(164, n)
}

func (rcv *Article) PrepMin() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(166))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutatePrepMin(n int32) bool {
	return rcv._tab.MutateInt32Slot(166, n)
}

func (rcv *Article) IdArticleKsp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(168))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateIdArticleKsp(n int64) bool {
	return rcv._tab.MutateInt64Slot(168, n)
}

func (rcv *Article) WarnMin() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(170))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateWarnMin(n int32) bool {
	return rcv._tab.MutateInt32Slot(170, n)
}

func (rcv *Article) EmptyArticle() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(172))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateEmptyArticle(n bool) bool {
	return rcv._tab.MutateBoolSlot(172, n)
}

func (rcv *Article) BcDebitcredit() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(174))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateBcDebitcredit(n bool) bool {
	return rcv._tab.MutateBoolSlot(174, n)
}

func (rcv *Article) PrepSec() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(176))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutatePrepSec(n int32) bool {
	return rcv._tab.MutateInt32Slot(176, n)
}

func (rcv *Article) IdSuppliers() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(178))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateIdSuppliers(n int64) bool {
	return rcv._tab.MutateInt64Slot(178, n)
}

func (rcv *Article) MainPrice() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(180))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateMainPrice(n bool) bool {
	return rcv._tab.MutateBoolSlot(180, n)
}

func (rcv *Article) OmanText() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(182))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Article) IdAgeGroups() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(184))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateIdAgeGroups(n int64) bool {
	return rcv._tab.MutateInt64Slot(184, n)
}

func (rcv *Article) Surcharge() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(186))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateSurcharge(n bool) bool {
	return rcv._tab.MutateBoolSlot(186, n)
}

func (rcv *Article) InfoData() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(188))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Article) PosDisabled() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(190))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutatePosDisabled(n bool) bool {
	return rcv._tab.MutateBoolSlot(190, n)
}

func (rcv *Article) MlName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(192))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Article) MlKsName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(194))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Article) AltArticles() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(196))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateAltArticles(n int64) bool {
	return rcv._tab.MutateInt64Slot(196, n)
}

func (rcv *Article) AltAlias() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(198))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Article) NeedPrep() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(200))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateNeedPrep(n bool) bool {
	return rcv._tab.MutateBoolSlot(200, n)
}

func (rcv *Article) AutoOnhold() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(202))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateAutoOnhold(n bool) bool {
	return rcv._tab.MutateBoolSlot(202, n)
}

func (rcv *Article) IdKsWf() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(204))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateIdKsWf(n int64) bool {
	return rcv._tab.MutateInt64Slot(204, n)
}

func (rcv *Article) KsWfType() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(206))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateKsWfType(n int32) bool {
	return rcv._tab.MutateInt32Slot(206, n)
}

func (rcv *Article) AskCourse() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(208))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateAskCourse(n bool) bool {
	return rcv._tab.MutateBoolSlot(208, n)
}

func (rcv *Article) PopupInfo() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(210))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Article) AllowOrderItems() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(212))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateAllowOrderItems(n bool) bool {
	return rcv._tab.MutateBoolSlot(212, n)
}

func (rcv *Article) MustCombined() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(214))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateMustCombined(n bool) bool {
	return rcv._tab.MutateBoolSlot(214, n)
}

func (rcv *Article) BlockDiscount() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(216))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateBlockDiscount(n bool) bool {
	return rcv._tab.MutateBoolSlot(216, n)
}

func (rcv *Article) HasDefaultOptions() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(218))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateHasDefaultOptions(n bool) bool {
	return rcv._tab.MutateBoolSlot(218, n)
}

func (rcv *Article) HhtDefaultSetting() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(220))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateHhtDefaultSetting(n bool) bool {
	return rcv._tab.MutateBoolSlot(220, n)
}

func (rcv *Article) OmanDefaultSetting() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(222))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateOmanDefaultSetting(n bool) bool {
	return rcv._tab.MutateBoolSlot(222, n)
}

func (rcv *Article) IdRentPeriods() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(224))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateIdRentPeriods(n int64) bool {
	return rcv._tab.MutateInt64Slot(224, n)
}

func (rcv *Article) DelaySeparateMins() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(226))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateDelaySeparateMins(n int32) bool {
	return rcv._tab.MutateInt32Slot(226, n)
}

func (rcv *Article) IdKsc() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(228))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateIdKsc(n int64) bool {
	return rcv._tab.MutateInt64Slot(228, n)
}

func (rcv *Article) MlPcText() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(230))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Article) MlRmText() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(232))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Article) MlOmanText() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(234))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Article) PosArticleType() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(236))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutatePosArticleType(n bool) bool {
	return rcv._tab.MutateBoolSlot(236, n)
}

func (rcv *Article) SingleFreeOption() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(238))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateSingleFreeOption(n bool) bool {
	return rcv._tab.MutateBoolSlot(238, n)
}

func (rcv *Article) KsSingleItem() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(240))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateKsSingleItem(n bool) bool {
	return rcv._tab.MutateBoolSlot(240, n)
}

func (rcv *Article) Allergen() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(242))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateAllergen(n bool) bool {
	return rcv._tab.MutateBoolSlot(242, n)
}

func (rcv *Article) AutoResetcourse() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(244))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateAutoResetcourse(n bool) bool {
	return rcv._tab.MutateBoolSlot(244, n)
}

func (rcv *Article) BlockTransfer() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(246))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Article) MutateBlockTransfer(n bool) bool {
	return rcv._tab.MutateBoolSlot(246, n)
}

func (rcv *Article) IdSizeModifier() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(248))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Article) MutateIdSizeModifier(n int64) bool {
	return rcv._tab.MutateInt64Slot(248, n)
}

func ArticleStart(builder *flatbuffers.Builder) {
	builder.StartObject(123)
}
func ArticleAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(0, id, 0)
}
func ArticleAddArticleNumber(builder *flatbuffers.Builder, articleNumber int32) {
	builder.PrependInt32Slot(1, articleNumber, 0)
}
func ArticleAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(name), 0)
}
func ArticleAddInternalName(builder *flatbuffers.Builder, internalName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(internalName), 0)
}
func ArticleAddArticleManual(builder *flatbuffers.Builder, articleManual bool) {
	builder.PrependBoolSlot(4, articleManual, false)
}
func ArticleAddArticleHash(builder *flatbuffers.Builder, articleHash bool) {
	builder.PrependBoolSlot(5, articleHash, false)
}
func ArticleAddIdCourses(builder *flatbuffers.Builder, idCourses int64) {
	builder.PrependInt64Slot(6, idCourses, 0)
}
func ArticleAddIdDepartament(builder *flatbuffers.Builder, idDepartament int64) {
	builder.PrependInt64Slot(7, idDepartament, 0)
}
func ArticleAddPcBitmap(builder *flatbuffers.Builder, pcBitmap flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(pcBitmap), 0)
}
func ArticleAddPcColor(builder *flatbuffers.Builder, pcColor int32) {
	builder.PrependInt32Slot(9, pcColor, 0)
}
func ArticleAddPcText(builder *flatbuffers.Builder, pcText flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(pcText), 0)
}
func ArticleAddPcFontName(builder *flatbuffers.Builder, pcFontName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(pcFontName), 0)
}
func ArticleAddPcFontSize(builder *flatbuffers.Builder, pcFontSize int32) {
	builder.PrependInt32Slot(12, pcFontSize, 0)
}
func ArticleAddPcFontAttr(builder *flatbuffers.Builder, pcFontAttr int32) {
	builder.PrependInt32Slot(13, pcFontAttr, 0)
}
func ArticleAddPcFontColor(builder *flatbuffers.Builder, pcFontColor int32) {
	builder.PrependInt32Slot(14, pcFontColor, 0)
}
func ArticleAddRmText(builder *flatbuffers.Builder, rmText flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(rmText), 0)
}
func ArticleAddRmFontSize(builder *flatbuffers.Builder, rmFontSize int32) {
	builder.PrependInt32Slot(16, rmFontSize, 0)
}
func ArticleAddIdPacking(builder *flatbuffers.Builder, idPacking int64) {
	builder.PrependInt64Slot(17, idPacking, 0)
}
func ArticleAddIdCommission(builder *flatbuffers.Builder, idCommission int64) {
	builder.PrependInt64Slot(18, idCommission, 0)
}
func ArticleAddIdPromotions(builder *flatbuffers.Builder, idPromotions int64) {
	builder.PrependInt64Slot(19, idPromotions, 0)
}
func ArticleAddSavepoints(builder *flatbuffers.Builder, savepoints int32) {
	builder.PrependInt32Slot(20, savepoints, 0)
}
func ArticleAddQuantity(builder *flatbuffers.Builder, quantity int32) {
	builder.PrependInt32Slot(21, quantity, 0)
}
func ArticleAddHideonhold(builder *flatbuffers.Builder, hideonhold bool) {
	builder.PrependBoolSlot(22, hideonhold, false)
}
func ArticleAddBarcode(builder *flatbuffers.Builder, barcode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(barcode), 0)
}
func ArticleAddTimeActive(builder *flatbuffers.Builder, timeActive bool) {
	builder.PrependBoolSlot(24, timeActive, false)
}
func ArticleAddAftermin(builder *flatbuffers.Builder, aftermin int32) {
	builder.PrependInt32Slot(25, aftermin, 0)
}
func ArticleAddPeriodmin(builder *flatbuffers.Builder, periodmin int32) {
	builder.PrependInt32Slot(26, periodmin, 0)
}
func ArticleAddRoundmin(builder *flatbuffers.Builder, roundmin int32) {
	builder.PrependInt32Slot(27, roundmin, 0)
}
func ArticleAddIdCurrency(builder *flatbuffers.Builder, idCurrency int64) {
	builder.PrependInt64Slot(28, idCurrency, 0)
}
func ArticleAddControlActive(builder *flatbuffers.Builder, controlActive bool) {
	builder.PrependBoolSlot(29, controlActive, false)
}
func ArticleAddControlTime(builder *flatbuffers.Builder, controlTime int32) {
	builder.PrependInt32Slot(30, controlTime, 0)
}
func ArticleAddPluNumberVanduijnen(builder *flatbuffers.Builder, pluNumberVanduijnen int32) {
	builder.PrependInt32Slot(31, pluNumberVanduijnen, 0)
}
func ArticleAddSequence(builder *flatbuffers.Builder, sequence int32) {
	builder.PrependInt32Slot(32, sequence, 0)
}
func ArticleAddRmSequence(builder *flatbuffers.Builder, rmSequence int32) {
	builder.PrependInt32Slot(33, rmSequence, 0)
}
func ArticleAddPurchasePrice(builder *flatbuffers.Builder, purchasePrice float32) {
	builder.PrependFloat32Slot(34, purchasePrice, 0.0)
}
func ArticleAddIdVdGroup(builder *flatbuffers.Builder, idVdGroup int64) {
	builder.PrependInt64Slot(35, idVdGroup, 0)
}
func ArticleAddMenu(builder *flatbuffers.Builder, menu bool) {
	builder.PrependBoolSlot(36, menu, false)
}
func ArticleAddSensitive(builder *flatbuffers.Builder, sensitive bool) {
	builder.PrependBoolSlot(37, sensitive, false)
}
func ArticleAddSensitiveOption(builder *flatbuffers.Builder, sensitiveOption bool) {
	builder.PrependBoolSlot(38, sensitiveOption, false)
}
func ArticleAddDailyStock(builder *flatbuffers.Builder, dailyStock int32) {
	builder.PrependInt32Slot(39, dailyStock, 0)
}
func ArticleAddInfo(builder *flatbuffers.Builder, info flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(40, flatbuffers.UOffsetT(info), 0)
}
func ArticleAddWarningLevel(builder *flatbuffers.Builder, warningLevel int32) {
	builder.PrependInt32Slot(41, warningLevel, 0)
}
func ArticleAddFreeAfterPay(builder *flatbuffers.Builder, freeAfterPay int32) {
	builder.PrependInt32Slot(42, freeAfterPay, 0)
}
func ArticleAddIdFoodGroup(builder *flatbuffers.Builder, idFoodGroup int64) {
	builder.PrependInt64Slot(43, idFoodGroup, 0)
}
func ArticleAddArticleType(builder *flatbuffers.Builder, articleType bool) {
	builder.PrependBoolSlot(44, articleType, false)
}
func ArticleAddIdInventoryItem(builder *flatbuffers.Builder, idInventoryItem int64) {
	builder.PrependInt64Slot(45, idInventoryItem, 0)
}
func ArticleAddIdRecipe(builder *flatbuffers.Builder, idRecipe int64) {
	builder.PrependInt64Slot(46, idRecipe, 0)
}
func ArticleAddIdUnitySales(builder *flatbuffers.Builder, idUnitySales int64) {
	builder.PrependInt64Slot(47, idUnitySales, 0)
}
func ArticleAddCanSavepoints(builder *flatbuffers.Builder, canSavepoints bool) {
	builder.PrependBoolSlot(48, canSavepoints, false)
}
func ArticleAddShowInKitchenScreen(builder *flatbuffers.Builder, showInKitchenScreen bool) {
	builder.PrependBoolSlot(49, showInKitchenScreen, false)
}
func ArticleAddDecreaseSavepoints(builder *flatbuffers.Builder, decreaseSavepoints int32) {
	builder.PrependInt32Slot(50, decreaseSavepoints, 0)
}
func ArticleAddHhtColor(builder *flatbuffers.Builder, hhtColor int32) {
	builder.PrependInt32Slot(51, hhtColor, 0)
}
func ArticleAddHhtFontName(builder *flatbuffers.Builder, hhtFontName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(52, flatbuffers.UOffsetT(hhtFontName), 0)
}
func ArticleAddHhtFontSize(builder *flatbuffers.Builder, hhtFontSize int32) {
	builder.PrependInt32Slot(53, hhtFontSize, 0)
}
func ArticleAddHhtFontAttr(builder *flatbuffers.Builder, hhtFontAttr int32) {
	builder.PrependInt32Slot(54, hhtFontAttr, 0)
}
func ArticleAddHhtFontColor(builder *flatbuffers.Builder, hhtFontColor int32) {
	builder.PrependInt32Slot(55, hhtFontColor, 0)
}
func ArticleAddTip(builder *flatbuffers.Builder, tip bool) {
	builder.PrependBoolSlot(56, tip, false)
}
func ArticleAddIdBecoGroup(builder *flatbuffers.Builder, idBecoGroup int64) {
	builder.PrependInt64Slot(57, idBecoGroup, 0)
}
func ArticleAddIdBecoLocation(builder *flatbuffers.Builder, idBecoLocation int64) {
	builder.PrependInt64Slot(58, idBecoLocation, 0)
}
func ArticleAddBcStandardDosage(builder *flatbuffers.Builder, bcStandardDosage int32) {
	builder.PrependInt32Slot(59, bcStandardDosage, 0)
}
func ArticleAddBcAlternativeDosage(builder *flatbuffers.Builder, bcAlternativeDosage int32) {
	builder.PrependInt32Slot(60, bcAlternativeDosage, 0)
}
func ArticleAddBcDisablebalance(builder *flatbuffers.Builder, bcDisablebalance bool) {
	builder.PrependBoolSlot(61, bcDisablebalance, false)
}
func ArticleAddBcUseLocations(builder *flatbuffers.Builder, bcUseLocations bool) {
	builder.PrependBoolSlot(62, bcUseLocations, false)
}
func ArticleAddTimeRate(builder *flatbuffers.Builder, timeRate float32) {
	builder.PrependFloat32Slot(63, timeRate, 0.0)
}
func ArticleAddIdFreeOption(builder *flatbuffers.Builder, idFreeOption int64) {
	builder.PrependInt64Slot(64, idFreeOption, 0)
}
func ArticleAddPartyArticle(builder *flatbuffers.Builder, partyArticle bool) {
	builder.PrependBoolSlot(65, partyArticle, false)
}
func ArticleAddIdPuaGroups(builder *flatbuffers.Builder, idPuaGroups int64) {
	builder.PrependInt64Slot(66, idPuaGroups, 0)
}
func ArticleAddPromo(builder *flatbuffers.Builder, promo bool) {
	builder.PrependBoolSlot(67, promo, false)
}
func ArticleAddOneHandLimit(builder *flatbuffers.Builder, oneHandLimit int32) {
	builder.PrependInt32Slot(68, oneHandLimit, 0)
}
func ArticleAddConsolidateQuantity(builder *flatbuffers.Builder, consolidateQuantity int32) {
	builder.PrependInt32Slot(69, consolidateQuantity, 0)
}
func ArticleAddConsolidateAliasName(builder *flatbuffers.Builder, consolidateAliasName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(70, flatbuffers.UOffsetT(consolidateAliasName), 0)
}
func ArticleAddHqId(builder *flatbuffers.Builder, hqId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(71, flatbuffers.UOffsetT(hqId), 0)
}
func ArticleAddIsActive(builder *flatbuffers.Builder, isActive bool) {
	builder.PrependBoolSlot(72, isActive, false)
}
func ArticleAddIsActiveModified(builder *flatbuffers.Builder, isActiveModified int64) {
	builder.PrependInt64Slot(73, isActiveModified, 0)
}
func ArticleAddIsActiveModifier(builder *flatbuffers.Builder, isActiveModifier flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(74, flatbuffers.UOffsetT(isActiveModifier), 0)
}
func ArticleAddRentPriceType(builder *flatbuffers.Builder, rentPriceType bool) {
	builder.PrependBoolSlot(75, rentPriceType, false)
}
func ArticleAddIdRentalGroup(builder *flatbuffers.Builder, idRentalGroup int64) {
	builder.PrependInt64Slot(76, idRentalGroup, 0)
}
func ArticleAddConditionCheckInOrder(builder *flatbuffers.Builder, conditionCheckInOrder bool) {
	builder.PrependBoolSlot(77, conditionCheckInOrder, false)
}
func ArticleAddWeightRequired(builder *flatbuffers.Builder, weightRequired bool) {
	builder.PrependBoolSlot(78, weightRequired, false)
}
func ArticleAddDailyNumeric1(builder *flatbuffers.Builder, dailyNumeric1 float32) {
	builder.PrependFloat32Slot(79, dailyNumeric1, 0.0)
}
func ArticleAddDailyNumeric2(builder *flatbuffers.Builder, dailyNumeric2 float32) {
	builder.PrependFloat32Slot(80, dailyNumeric2, 0.0)
}
func ArticleAddPrepMin(builder *flatbuffers.Builder, prepMin int32) {
	builder.PrependInt32Slot(81, prepMin, 0)
}
func ArticleAddIdArticleKsp(builder *flatbuffers.Builder, idArticleKsp int64) {
	builder.PrependInt64Slot(82, idArticleKsp, 0)
}
func ArticleAddWarnMin(builder *flatbuffers.Builder, warnMin int32) {
	builder.PrependInt32Slot(83, warnMin, 0)
}
func ArticleAddEmptyArticle(builder *flatbuffers.Builder, emptyArticle bool) {
	builder.PrependBoolSlot(84, emptyArticle, false)
}
func ArticleAddBcDebitcredit(builder *flatbuffers.Builder, bcDebitcredit bool) {
	builder.PrependBoolSlot(85, bcDebitcredit, false)
}
func ArticleAddPrepSec(builder *flatbuffers.Builder, prepSec int32) {
	builder.PrependInt32Slot(86, prepSec, 0)
}
func ArticleAddIdSuppliers(builder *flatbuffers.Builder, idSuppliers int64) {
	builder.PrependInt64Slot(87, idSuppliers, 0)
}
func ArticleAddMainPrice(builder *flatbuffers.Builder, mainPrice bool) {
	builder.PrependBoolSlot(88, mainPrice, false)
}
func ArticleAddOmanText(builder *flatbuffers.Builder, omanText flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(89, flatbuffers.UOffsetT(omanText), 0)
}
func ArticleAddIdAgeGroups(builder *flatbuffers.Builder, idAgeGroups int64) {
	builder.PrependInt64Slot(90, idAgeGroups, 0)
}
func ArticleAddSurcharge(builder *flatbuffers.Builder, surcharge bool) {
	builder.PrependBoolSlot(91, surcharge, false)
}
func ArticleAddInfoData(builder *flatbuffers.Builder, infoData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(92, flatbuffers.UOffsetT(infoData), 0)
}
func ArticleAddPosDisabled(builder *flatbuffers.Builder, posDisabled bool) {
	builder.PrependBoolSlot(93, posDisabled, false)
}
func ArticleAddMlName(builder *flatbuffers.Builder, mlName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(94, flatbuffers.UOffsetT(mlName), 0)
}
func ArticleAddMlKsName(builder *flatbuffers.Builder, mlKsName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(95, flatbuffers.UOffsetT(mlKsName), 0)
}
func ArticleAddAltArticles(builder *flatbuffers.Builder, altArticles int64) {
	builder.PrependInt64Slot(96, altArticles, 0)
}
func ArticleAddAltAlias(builder *flatbuffers.Builder, altAlias flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(97, flatbuffers.UOffsetT(altAlias), 0)
}
func ArticleAddNeedPrep(builder *flatbuffers.Builder, needPrep bool) {
	builder.PrependBoolSlot(98, needPrep, false)
}
func ArticleAddAutoOnhold(builder *flatbuffers.Builder, autoOnhold bool) {
	builder.PrependBoolSlot(99, autoOnhold, false)
}
func ArticleAddIdKsWf(builder *flatbuffers.Builder, idKsWf int64) {
	builder.PrependInt64Slot(100, idKsWf, 0)
}
func ArticleAddKsWfType(builder *flatbuffers.Builder, ksWfType int32) {
	builder.PrependInt32Slot(101, ksWfType, 0)
}
func ArticleAddAskCourse(builder *flatbuffers.Builder, askCourse bool) {
	builder.PrependBoolSlot(102, askCourse, false)
}
func ArticleAddPopupInfo(builder *flatbuffers.Builder, popupInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(103, flatbuffers.UOffsetT(popupInfo), 0)
}
func ArticleAddAllowOrderItems(builder *flatbuffers.Builder, allowOrderItems bool) {
	builder.PrependBoolSlot(104, allowOrderItems, false)
}
func ArticleAddMustCombined(builder *flatbuffers.Builder, mustCombined bool) {
	builder.PrependBoolSlot(105, mustCombined, false)
}
func ArticleAddBlockDiscount(builder *flatbuffers.Builder, blockDiscount bool) {
	builder.PrependBoolSlot(106, blockDiscount, false)
}
func ArticleAddHasDefaultOptions(builder *flatbuffers.Builder, hasDefaultOptions bool) {
	builder.PrependBoolSlot(107, hasDefaultOptions, false)
}
func ArticleAddHhtDefaultSetting(builder *flatbuffers.Builder, hhtDefaultSetting bool) {
	builder.PrependBoolSlot(108, hhtDefaultSetting, false)
}
func ArticleAddOmanDefaultSetting(builder *flatbuffers.Builder, omanDefaultSetting bool) {
	builder.PrependBoolSlot(109, omanDefaultSetting, false)
}
func ArticleAddIdRentPeriods(builder *flatbuffers.Builder, idRentPeriods int64) {
	builder.PrependInt64Slot(110, idRentPeriods, 0)
}
func ArticleAddDelaySeparateMins(builder *flatbuffers.Builder, delaySeparateMins int32) {
	builder.PrependInt32Slot(111, delaySeparateMins, 0)
}
func ArticleAddIdKsc(builder *flatbuffers.Builder, idKsc int64) {
	builder.PrependInt64Slot(112, idKsc, 0)
}
func ArticleAddMlPcText(builder *flatbuffers.Builder, mlPcText flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(113, flatbuffers.UOffsetT(mlPcText), 0)
}
func ArticleAddMlRmText(builder *flatbuffers.Builder, mlRmText flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(114, flatbuffers.UOffsetT(mlRmText), 0)
}
func ArticleAddMlOmanText(builder *flatbuffers.Builder, mlOmanText flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(115, flatbuffers.UOffsetT(mlOmanText), 0)
}
func ArticleAddPosArticleType(builder *flatbuffers.Builder, posArticleType bool) {
	builder.PrependBoolSlot(116, posArticleType, false)
}
func ArticleAddSingleFreeOption(builder *flatbuffers.Builder, singleFreeOption bool) {
	builder.PrependBoolSlot(117, singleFreeOption, false)
}
func ArticleAddKsSingleItem(builder *flatbuffers.Builder, ksSingleItem bool) {
	builder.PrependBoolSlot(118, ksSingleItem, false)
}
func ArticleAddAllergen(builder *flatbuffers.Builder, allergen bool) {
	builder.PrependBoolSlot(119, allergen, false)
}
func ArticleAddAutoResetcourse(builder *flatbuffers.Builder, autoResetcourse bool) {
	builder.PrependBoolSlot(120, autoResetcourse, false)
}
func ArticleAddBlockTransfer(builder *flatbuffers.Builder, blockTransfer bool) {
	builder.PrependBoolSlot(121, blockTransfer, false)
}
func ArticleAddIdSizeModifier(builder *flatbuffers.Builder, idSizeModifier int64) {
	builder.PrependInt64Slot(122, idSizeModifier, 0)
}
func ArticleEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
