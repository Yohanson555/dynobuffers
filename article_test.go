package dynobuffers

import (
	"reflect"
	"testing"
)

func getArticleSchema() *Schema {
	s := NewSchema()
	s.AddField("id", FieldTypeLong)
	s.AddField("article_number", FieldTypeInt)
	s.AddField("name", FieldTypeString)
	s.AddField("internal_name", FieldTypeString)
	s.AddField("article_manual", FieldTypeBool)
	s.AddField("article_hash", FieldTypeBool)
	s.AddField("id_courses", FieldTypeLong)
	s.AddField("id_departament", FieldTypeLong)
	s.AddField("pc_bitmap", FieldTypeString) // blob
	s.AddField("pc_color", FieldTypeInt)
	s.AddField("pc_text", FieldTypeString)
	s.AddField("pc_font_name", FieldTypeString)
	s.AddField("pc_font_size", FieldTypeInt)
	s.AddField("pc_font_attr", FieldTypeInt)
	s.AddField("pc_font_color", FieldTypeInt)
	s.AddField("rm_text", FieldTypeString)
	s.AddField("rm_font_size", FieldTypeInt)
	s.AddField("id_packing", FieldTypeLong)
	s.AddField("id_commission", FieldTypeLong)
	s.AddField("id_promotions", FieldTypeLong)
	s.AddField("savepoints", FieldTypeInt)
	s.AddField("quantity", FieldTypeInt)
	s.AddField("hideonhold", FieldTypeBool)
	s.AddField("barcode", FieldTypeString)
	s.AddField("time_active", FieldTypeBool)
	s.AddField("aftermin", FieldTypeInt)
	s.AddField("periodmin", FieldTypeInt)
	s.AddField("roundmin", FieldTypeInt)
	s.AddField("id_currency", FieldTypeLong)
	s.AddField("control_active", FieldTypeBool)
	s.AddField("control_time", FieldTypeInt)
	s.AddField("plu_number_vanduijnen", FieldTypeInt)
	s.AddField("sequence", FieldTypeInt)
	s.AddField("rm_sequence", FieldTypeInt)
	s.AddField("purchase_price", FieldTypeFloat)
	s.AddField("id_vd_group", FieldTypeLong)
	s.AddField("menu", FieldTypeBool)
	s.AddField("sensitive", FieldTypeBool)
	s.AddField("sensitive_option", FieldTypeBool)
	s.AddField("daily_stock", FieldTypeInt)
	s.AddField("info", FieldTypeString)
	s.AddField("warning_level", FieldTypeInt)
	s.AddField("free_after_pay", FieldTypeInt)
	s.AddField("id_food_group", FieldTypeLong)
	s.AddField("article_type", FieldTypeByte)
	s.AddField("id_inventory_item", FieldTypeLong)
	s.AddField("id_recipe", FieldTypeLong)
	s.AddField("id_unity_sales", FieldTypeLong)
	s.AddField("can_savepoints", FieldTypeBool)
	s.AddField("show_in_kitchen_screen", FieldTypeBool)
	s.AddField("decrease_savepoints", FieldTypeInt)
	s.AddField("hht_color", FieldTypeInt)
	s.AddField("hht_font_name", FieldTypeString)
	s.AddField("hht_font_size", FieldTypeInt)
	s.AddField("hht_font_attr", FieldTypeInt)
	s.AddField("hht_font_color", FieldTypeInt)
	s.AddField("tip", FieldTypeBool)
	s.AddField("id_beco_group", FieldTypeLong)
	s.AddField("id_beco_location", FieldTypeLong)
	s.AddField("bc_standard_dosage", FieldTypeInt)
	s.AddField("bc_alternative_dosage", FieldTypeInt)
	s.AddField("bc_disablebalance", FieldTypeBool)
	s.AddField("bc_use_locations", FieldTypeBool)
	s.AddField("time_rate", FieldTypeFloat)
	s.AddField("id_free_option", FieldTypeLong)
	s.AddField("party_article", FieldTypeBool)
	s.AddField("id_pua_groups", FieldTypeLong)
	s.AddField("promo", FieldTypeBool)
	s.AddField("one_hand_limit", FieldTypeInt)
	s.AddField("consolidate_quantity", FieldTypeInt)
	s.AddField("consolidate_alias_name", FieldTypeString)
	s.AddField("hq_id", FieldTypeString)
	s.AddField("is_active", FieldTypeBool)
	s.AddField("is_active_modified", FieldTypeInt) // timestamp
	s.AddField("is_active_modifier", FieldTypeString)
	s.AddField("rent_price_type", FieldTypeBool)
	s.AddField("id_rental_group", FieldTypeLong)
	s.AddField("condition_check_in_order", FieldTypeBool)
	s.AddField("weight_required", FieldTypeBool)
	s.AddField("daily_numeric_1", FieldTypeFloat)
	s.AddField("daily_numeric_2", FieldTypeFloat)
	s.AddField("prep_min", FieldTypeInt)
	s.AddField("id_article_ksp", FieldTypeLong)
	s.AddField("warn_min", FieldTypeInt)
	s.AddField("empty_article", FieldTypeBool)
	s.AddField("bc_debitcredit", FieldTypeBool)
	s.AddField("prep_sec", FieldTypeInt)
	s.AddField("id_suppliers", FieldTypeLong)
	s.AddField("main_price", FieldTypeBool)
	s.AddField("oman_text", FieldTypeString)
	s.AddField("id_age_groups", FieldTypeLong)
	s.AddField("surcharge", FieldTypeBool)
	s.AddField("info_data", FieldTypeString) //blob
	s.AddField("pos_disabled", FieldTypeBool)
	s.AddField("ml_name", FieldTypeString)    // blob
	s.AddField("ml_ks_name", FieldTypeString) // blob
	s.AddField("alt_articles", FieldTypeLong)
	s.AddField("alt_alias", FieldTypeString)
	s.AddField("need_prep", FieldTypeBool)
	s.AddField("auto_onhold", FieldTypeBool)
	s.AddField("id_ks_wf", FieldTypeLong)
	s.AddField("ks_wf_type", FieldTypeInt)
	s.AddField("ask_course", FieldTypeBool)
	s.AddField("popup_info", FieldTypeString)
	s.AddField("allow_order_items", FieldTypeBool)
	s.AddField("must_combined", FieldTypeBool)
	s.AddField("block_discount", FieldTypeBool)
	s.AddField("has_default_options", FieldTypeBool)
	s.AddField("hht_default_setting", FieldTypeBool)
	s.AddField("oman_default_setting", FieldTypeBool)
	s.AddField("id_rent_periods", FieldTypeLong)
	s.AddField("delay_separate_mins", FieldTypeInt)
	s.AddField("id_ksc", FieldTypeLong)
	s.AddField("ml_pc_text", FieldTypeString)   // blob
	s.AddField("ml_rm_text", FieldTypeString)   // blob
	s.AddField("ml_oman_text", FieldTypeString) // blob
	s.AddField("pos_article_type", FieldTypeBool)
	s.AddField("single_free_option", FieldTypeBool)
	s.AddField("ks_single_item", FieldTypeBool)
	s.AddField("allergen", FieldTypeBool)
	s.AddField("auto_resetcourse", FieldTypeBool)
	s.AddField("block_transfer", FieldTypeBool)
	s.AddField("id_size_modifier", FieldTypeLong)
	return s
}

func TestArticle(t *testing.T) {
	s := getArticleSchema()
	bf := NewBuffer(s)
	set("id", bf, int64(2))
	set("article_number", bf, int32(1))
	set("name", bf, "str")
	set("internal_name", bf, "str")
	set("article_manual", bf, true)
	set("article_hash", bf, true)
	set("id_courses", bf, int64(2))
	set("id_departament", bf, int64(2))
	set("pc_bitmap", bf, "str") // blob
	set("pc_color", bf, int32(1))
	set("pc_text", bf, "str")
	set("pc_font_name", bf, "str")
	set("pc_font_size", bf, int32(1))
	set("pc_font_attr", bf, int32(1))
	set("pc_font_color", bf, int32(1))
	set("rm_text", bf, "str")
	set("rm_font_size", bf, int32(1))
	set("id_packing", bf, int64(2))
	set("id_commission", bf, int64(2))
	set("id_promotions", bf, int64(2))
	set("savepoints", bf, int32(1))
	set("quantity", bf, int32(1))
	set("hideonhold", bf, true)
	set("barcode", bf, "str")
	set("time_active", bf, true)
	set("aftermin", bf, int32(1))
	set("periodmin", bf, int32(1))
	set("roundmin", bf, int32(1))
	set("id_currency", bf, int64(2))
	set("control_active", bf, true)
	set("control_time", bf, int32(1))
	set("plu_number_vanduijnen", bf, int32(1))
	set("sequence", bf, int32(1))
	set("rm_sequence", bf, int32(1))
	set("purchase_price", bf, float32(0.123))
	set("id_vd_group", bf, int64(2))
	set("menu", bf, true)
	set("sensitive", bf, true)
	set("sensitive_option", bf, true)
	set("daily_stock", bf, int32(1))
	set("info", bf, "str")
	set("warning_level", bf, int32(1))
	set("free_after_pay", bf, int32(1))
	set("id_food_group", bf, int64(2))
	set("article_type", bf, byte(3))
	set("id_inventory_item", bf, int64(2))
	set("id_recipe", bf, int64(2))
	set("id_unity_sales", bf, int64(2))
	set("can_savepoints", bf, true)
	set("show_in_kitchen_screen", bf, true)
	set("decrease_savepoints", bf, int32(1))
	set("hht_color", bf, int32(1))
	set("hht_font_name", bf, "str")
	set("hht_font_size", bf, int32(1))
	set("hht_font_attr", bf, int32(1))
	set("hht_font_color", bf, int32(1))
	set("tip", bf, true)
	set("id_beco_group", bf, int64(2))
	set("id_beco_location", bf, int64(2))
	set("bc_standard_dosage", bf, int32(1))
	set("bc_alternative_dosage", bf, int32(1))
	set("bc_disablebalance", bf, true)
	set("bc_use_locations", bf, true)
	set("time_rate", bf, float32(0.123))
	set("id_free_option", bf, int64(2))
	set("party_article", bf, true)
	set("id_pua_groups", bf, int64(2))
	set("promo", bf, true)
	set("one_hand_limit", bf, int32(1))
	set("consolidate_quantity", bf, int32(1))
	set("consolidate_alias_name", bf, "str")
	set("hq_id", bf, "str")
	set("is_active", bf, true)
	set("is_active_modified", bf, int32(1)) // timestamp
	set("is_active_modifier", bf, "str")
	set("rent_price_type", bf, true)
	set("id_rental_group", bf, int64(2))
	set("condition_check_in_order", bf, true)
	set("weight_required", bf, true)
	set("daily_numeric_1", bf, float32(0.123))
	set("daily_numeric_2", bf, float32(0.123))
	set("prep_min", bf, int32(1))
	set("id_article_ksp", bf, int64(2))
	set("warn_min", bf, int32(1))
	set("empty_article", bf, true)
	set("bc_debitcredit", bf, true)
	set("prep_sec", bf, int32(1))
	set("id_suppliers", bf, int64(2))
	set("main_price", bf, true)
	set("oman_text", bf, "str")
	set("id_age_groups", bf, int64(2))
	set("surcharge", bf, true)
	set("info_data", bf, "str") //blob
	set("pos_disabled", bf, true)
	set("ml_name", bf, "str")    // blob
	set("ml_ks_name", bf, "str") // blob
	set("alt_articles", bf, int64(2))
	set("alt_alias", bf, "str")
	set("need_prep", bf, true)
	set("auto_onhold", bf, true)
	set("id_ks_wf", bf, int64(2))
	set("ks_wf_type", bf, int32(1))
	set("ask_course", bf, true)
	set("popup_info", bf, "str")
	set("allow_order_items", bf, true)
	set("must_combined", bf, true)
	set("block_discount", bf, true)
	set("has_default_options", bf, true)
	set("hht_default_setting", bf, true)
	set("oman_default_setting", bf, true)
	set("id_rent_periods", bf, int64(2))
	set("delay_separate_mins", bf, int32(1))
	set("id_ksc", bf, int64(2))
	set("ml_pc_text", bf, "str")   // blob
	set("ml_rm_text", bf, "str")   // blob
	set("ml_oman_text", bf, "str") // blob
	set("pos_article_type", bf, true)
	set("single_free_option", bf, true)
	set("ks_single_item", bf, true)
	set("allergen", bf, true)
	set("auto_resetcourse", bf, true)
	set("block_transfer", bf, true)
	set("id_size_modifier", bf, int64(2))

	bytes := bf.ToBytes()

	bf = ReadBuffer(bytes, s)

	testGet("id", bf, int64(2))
	testGet("article_number", bf, int32(1))
	testGet("name", bf, "str")
	testGet("internal_name", bf, "str")
	testGet("article_manual", bf, true)
	testGet("article_hash", bf, true)
	testGet("id_courses", bf, int64(2))
	testGet("id_departament", bf, int64(2))
	testGet("pc_bitmap", bf, "str") // blob
	testGet("pc_color", bf, int32(1))
	testGet("pc_text", bf, "str")
	testGet("pc_font_name", bf, "str")
	testGet("pc_font_size", bf, int32(1))
	testGet("pc_font_attr", bf, int32(1))
	testGet("pc_font_color", bf, int32(1))
	testGet("rm_text", bf, "str")
	testGet("rm_font_size", bf, int32(1))
	testGet("id_packing", bf, int64(2))
	testGet("id_commission", bf, int64(2))
	testGet("id_promotions", bf, int64(2))
	testGet("savepoints", bf, int32(1))
	testGet("quantity", bf, int32(1))
	testGet("hideonhold", bf, true)
	testGet("barcode", bf, "str")
	testGet("time_active", bf, true)
	testGet("aftermin", bf, int32(1))
	testGet("periodmin", bf, int32(1))
	testGet("roundmin", bf, int32(1))
	testGet("id_currency", bf, int64(2))
	testGet("control_active", bf, true)
	testGet("control_time", bf, int32(1))
	testGet("plu_number_vanduijnen", bf, int32(1))
	testGet("sequence", bf, int32(1))
	testGet("rm_sequence", bf, int32(1))
	testGet("purchase_price", bf, float32(0.123))
	testGet("id_vd_group", bf, int64(2))
	testGet("menu", bf, true)
	testGet("sensitive", bf, true)
	testGet("sensitive_option", bf, true)
	testGet("daily_stock", bf, int32(1))
	testGet("info", bf, "str")
	testGet("warning_level", bf, int32(1))
	testGet("free_after_pay", bf, int32(1))
	testGet("id_food_group", bf, int64(2))
	testGet("article_type", bf, byte(3))
	testGet("id_inventory_item", bf, int64(2))
	testGet("id_recipe", bf, int64(2))
	testGet("id_unity_sales", bf, int64(2))
	testGet("can_savepoints", bf, true)
	testGet("show_in_kitchen_screen", bf, true)
	testGet("decrease_savepoints", bf, int32(1))
	testGet("hht_color", bf, int32(1))
	testGet("hht_font_name", bf, "str")
	testGet("hht_font_size", bf, int32(1))
	testGet("hht_font_attr", bf, int32(1))
	testGet("hht_font_color", bf, int32(1))
	testGet("tip", bf, true)
	testGet("id_beco_group", bf, int64(2))
	testGet("id_beco_location", bf, int64(2))
	testGet("bc_standard_dosage", bf, int32(1))
	testGet("bc_alternative_dosage", bf, int32(1))
	testGet("bc_disablebalance", bf, true)
	testGet("bc_use_locations", bf, true)
	testGet("time_rate", bf, float32(0.123))
	testGet("id_free_option", bf, int64(2))
	testGet("party_article", bf, true)
	testGet("id_pua_groups", bf, int64(2))
	testGet("promo", bf, true)
	testGet("one_hand_limit", bf, int32(1))
	testGet("consolidate_quantity", bf, int32(1))
	testGet("consolidate_alias_name", bf, "str")
	testGet("hq_id", bf, "str")
	testGet("is_active", bf, true)
	testGet("is_active_modified", bf, int32(1)) // timestamp
	testGet("is_active_modifier", bf, "str")
	testGet("rent_price_type", bf, true)
	testGet("id_rental_group", bf, int64(2))
	testGet("condition_check_in_order", bf, true)
	testGet("weight_required", bf, true)
	testGet("daily_numeric_1", bf, float32(0.123))
	testGet("daily_numeric_2", bf, float32(0.123))
	testGet("prep_min", bf, int32(1))
	testGet("id_article_ksp", bf, int64(2))
	testGet("warn_min", bf, int32(1))
	testGet("empty_article", bf, true)
	testGet("bc_debitcredit", bf, true)
	testGet("prep_sec", bf, int32(1))
	testGet("id_suppliers", bf, int64(2))
	testGet("main_price", bf, true)
	testGet("oman_text", bf, "str")
	testGet("id_age_groups", bf, int64(2))
	testGet("surcharge", bf, true)
	testGet("info_data", bf, "str") //blob
	testGet("pos_disabled", bf, true)
	testGet("ml_name", bf, "str")    // blob
	testGet("ml_ks_name", bf, "str") // blob
	testGet("alt_articles", bf, int64(2))
	testGet("alt_alias", bf, "str")
	testGet("need_prep", bf, true)
	testGet("auto_onhold", bf, true)
	testGet("id_ks_wf", bf, int64(2))
	testGet("ks_wf_type", bf, int32(1))
	testGet("ask_course", bf, true)
	testGet("popup_info", bf, "str")
	testGet("allow_order_items", bf, true)
	testGet("must_combined", bf, true)
	testGet("block_discount", bf, true)
	testGet("has_default_options", bf, true)
	testGet("hht_default_setting", bf, true)
	testGet("oman_default_setting", bf, true)
	testGet("id_rent_periods", bf, int64(2))
	testGet("delay_separate_mins", bf, int32(1))
	testGet("id_ksc", bf, int64(2))
	testGet("ml_pc_text", bf, "str")   // blob
	testGet("ml_rm_text", bf, "str")   // blob
	testGet("ml_oman_text", bf, "str") // blob
	testGet("pos_article_type", bf, true)
	testGet("single_free_option", bf, true)
	testGet("ks_single_item", bf, true)
	testGet("allergen", bf, true)
	testGet("auto_resetcourse", bf, true)
	testGet("block_transfer", bf, true)
	testGet("id_size_modifier", bf, int64(2))
}

func testGet(name string, b *Buffer, expected interface{}) {
	actual, isSet := b.Get(name)
	if !isSet {
		panic("isSet")
	}
	if !reflect.DeepEqual(expected, actual) {
		panic("value")
	}
}

func set(name string, b *Buffer, value interface{}) {
	err := b.Set(name, value)
	if err != nil {
		panic(err)
	}
}
